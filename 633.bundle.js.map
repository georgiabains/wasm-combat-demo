{"version":3,"file":"633.bundle.js","mappings":"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","sources":["webpack://wasm-combat-demo/../pkg/wasm_combat_demo.js","webpack://wasm-combat-demo/./src/index.js","webpack://wasm-combat-demo/../pkg/wasm_combat_demo_bg.js"],"sourcesContent":["\nimport * as wasm from \"./wasm_combat_demo_bg.wasm\";\nimport { __wbg_set_wasm } from \"./wasm_combat_demo_bg.js\";\n__wbg_set_wasm(wasm);\nexport * from \"./wasm_combat_demo_bg.js\";\n","import { Entity } from \"../../pkg/wasm_combat_demo\";\n\nconst selectors = {\n  creature: {\n    healthCurrent: '[data-creature=\"health-current\"]',\n    healthTotal: '[data-creature=\"health-total\"]',\n    healthProgress: '[data-creature=\"health-progress\"]'\n  },\n  game: {\n    log: '[data-game=\"log\"]',\n  },\n  player: {\n    attackButton: '[data-player=\"attack-button\"]',\n    healthCurrent: '[data-player=\"health-current\"]',\n    healthTotal: '[data-player=\"health-total\"]',\n    healthProgress: '[data-player=\"health-progress\"]'\n  }\n}\n\nconst creature = Entity.new(30, 30, 5, 'creature')\nconst player = Entity.new(30, 30, 5, 'player')\n\ninitGame()\n\n/**\n * Run all scripts to initialise the game.\n */\nfunction initGame() {\n  initEntity(creature)\n  initEntity(player)\n\n  setEventListeners()\n}\n\n/**\n * Initialise entity using ID & entity.\n * @param {Entity} entity - Entity object\n */\nfunction initEntity(entity) {\n  renderEntityCurrentHealth(entity, entity.get_current_hp())\n  renderEntityTotalHealth(entity.get_name(), entity.get_total_hp())\n}\n\n/**\n * Set event listeners.\n */\nfunction setEventListeners() {\n  \n  /**\n   * Player attacks creature.\n   */\n  document.querySelector(selectors.player.attackButton).addEventListener('click', () => {\n    attackEntity(player, creature)\n    document.querySelector(selectors.player.attackButton).setAttribute('disabled', true)\n\n    if (!creature.get_current_hp()) {\n      recordGameAction('Player wins!')\n      return\n    }\n\n    setTimeout(() => {\n      attackEntity(creature, player)\n      document.querySelector(selectors.player.attackButton).removeAttribute('disabled')\n    }, 2000)\n  })\n}\n\n/**\n * Message to add to game log.\n * @param {String} message \n */\nfunction recordGameAction(message) {\n  const messageContainer = document.createElement('li')\n  messageContainer.textContent = message\n\n  document.querySelector(selectors.game.log).appendChild(messageContainer)\n}\n\n/**\n * Deal damage to target entity.\n * @param {Number} controllerEntity - Entity that deals damage.\n * @param {Entity} targetEntity - Entity that receives damage.\n */\nfunction attackEntity(controllerEntity, targetEntity) {\n  targetEntity.set_current_hp(controllerEntity.get_attack())\n  renderEntityCurrentHealth(targetEntity, targetEntity.get_current_hp())\n\n  const message = `${controllerEntity.get_name().toUpperCase()} dealt ${controllerEntity.get_attack()} damage to ${targetEntity.get_name().toUpperCase()}`\n  recordGameAction(message)\n}\n\n/**\n * Set current health of entity.\n * @param {String} entityId - Entity reference in `selectors`\n * @param {Number} currentHealth - Current health value\n */\nfunction renderEntityCurrentHealth(entity, currentHealth) {\n  if (!selectors[entity.get_name()]) {\n    return\n  }\n\n  document.querySelector(selectors[entity.get_name()].healthCurrent).textContent = currentHealth\n  document.querySelector(selectors[entity.get_name()].healthProgress).value = entity.get_current_hp() / entity.get_total_hp() * 100\n}\n\n/**\n * Set total health of entity.\n * @param {String} entityId - Entity reference in `selectors`\n * @param {Number} totalHealth - Total health value\n */\nfunction renderEntityTotalHealth(entityId, totalHealth) {\n  if (!selectors[entityId]) {\n    return\n  }\n\n  document.querySelector(selectors[entityId].healthTotal).textContent = totalHealth\n}\n","let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8ArrayMemory0 = null;\n\nfunction getUint8ArrayMemory0() {\n    if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength === 0) {\n        cachedUint8ArrayMemory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8ArrayMemory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8ArrayMemory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8ArrayMemory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8ArrayMemory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n        ptr = realloc(ptr, len, offset, 1) >>> 0;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} name\n*/\nexport function greet(name) {\n    const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    wasm.greet(ptr0, len0);\n}\n\nlet cachedDataViewMemory0 = null;\n\nfunction getDataViewMemory0() {\n    if (cachedDataViewMemory0 === null || cachedDataViewMemory0.buffer.detached === true || (cachedDataViewMemory0.buffer.detached === undefined && cachedDataViewMemory0.buffer !== wasm.memory.buffer)) {\n        cachedDataViewMemory0 = new DataView(wasm.memory.buffer);\n    }\n    return cachedDataViewMemory0;\n}\n\nconst EntityFinalization = (typeof FinalizationRegistry === 'undefined')\n    ? { register: () => {}, unregister: () => {} }\n    : new FinalizationRegistry(ptr => wasm.__wbg_entity_free(ptr >>> 0, 1));\n/**\n*/\nexport class Entity {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Entity.prototype);\n        obj.__wbg_ptr = ptr;\n        EntityFinalization.register(obj, obj.__wbg_ptr, obj);\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n        EntityFinalization.unregister(this);\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_entity_free(ptr, 0);\n    }\n    /**\n    * @param {number} current_hp_val\n    * @param {number} total_hp_val\n    * @param {number} attack_val\n    * @param {string} name_val\n    * @returns {Entity}\n    */\n    static new(current_hp_val, total_hp_val, attack_val, name_val) {\n        const ptr0 = passStringToWasm0(name_val, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.entity_new(current_hp_val, total_hp_val, attack_val, ptr0, len0);\n        return Entity.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get_current_hp() {\n        const ret = wasm.entity_get_current_hp(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_total_hp() {\n        const ret = wasm.entity_get_total_hp(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_attack() {\n        const ret = wasm.entity_get_attack(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {string}\n    */\n    get_name() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.entity_get_name(retptr, this.__wbg_ptr);\n            var r0 = getDataViewMemory0().getInt32(retptr + 4 * 0, true);\n            var r1 = getDataViewMemory0().getInt32(retptr + 4 * 1, true);\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @param {number} new_hp\n    */\n    set_current_hp(new_hp) {\n        wasm.entity_set_current_hp(this.__wbg_ptr, new_hp);\n    }\n}\n\nexport function __wbg_alert_0c7731892b930bab(arg0, arg1) {\n    alert(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["selectors","creature","healthCurrent","healthTotal","healthProgress","game","log","player","attackButton","new","initEntity","entity","entityId","totalHealth","renderEntityCurrentHealth","get_current_hp","get_name","get_total_hp","document","querySelector","textContent","recordGameAction","message","messageContainer","createElement","appendChild","attackEntity","controllerEntity","targetEntity","set_current_hp","get_attack","toUpperCase","currentHealth","value","addEventListener","setAttribute","setTimeout","removeAttribute","wasm","__wbg_set_wasm","val","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8ArrayMemory0","getUint8ArrayMemory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","cachedDataViewMemory0","getDataViewMemory0","detached","undefined","DataView","EntityFinalization","FinalizationRegistry","register","unregister","__wbg_entity_free","Entity","static","obj","Object","create","prototype","__wbg_ptr","__destroy_into_raw","this","free","current_hp_val","total_hp_val","attack_val","name_val","ptr0","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","__wbindgen_malloc","__wbindgen_realloc","len0","ret","entity_new","__wrap","entity_get_current_hp","entity_get_total_hp","entity_get_attack","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","entity_get_name","r0","getInt32","r1","__wbindgen_free","new_hp","entity_set_current_hp","__wbg_alert_0c7731892b930bab","arg0","arg1","alert","__wbindgen_throw","Error"],"sourceRoot":""}